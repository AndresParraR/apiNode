{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\OneDrive\\\\Documentos\\\\Study\\\\Briefcase\\\\src\\\\views\\\\Contact.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\nimport ContactService from '../services/ContactService';\nimport { useForm, Controller } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Banner = props => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    },\n    reset,\n    clearErrors,\n    setValue\n  } = useForm();\n\n  const onSubmit = async (data, e) => {\n    console.log(data, e);\n    setValue('names', '');\n    setValue('email', '');\n    setValue('message', '');\n    clearErrors();\n\n    try {\n      const res = await ContactService.sendEmail(data);\n      props.setSnack({\n        mode: 'success',\n        text: 'Thanks for contact me!'\n      });\n    } catch (err) {\n      props.setSnack({\n        mode: 'error',\n        text: 'Ups... Something was wrong!. Please try again'\n      });\n    }\n\n    props.openSnack(true);\n  };\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      marginTop: 70\n    },\n    titleContact: {\n      textAlign: 'center',\n      marginBottom: 20\n    },\n    form: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      padding: '3rem 2rem',\n      borderRadius: 15,\n      zIndex: 2\n    },\n    column: {\n      width: '100%',\n      padding: '1rem 1.5rem',\n      minWidth: 210\n    },\n    input: {\n      width: '100%'\n    },\n    sendBtn: {\n      margin: '1rem 1.5rem',\n      textTransform: 'none',\n      background: 'rgba(255, 255, 255, 0.1)',\n      borderTop: '1px solid rgba(255, 255, 255, 0.5)',\n      borderLeft: '1px solid rgba(255, 255, 255, 0.5)',\n      borderRight: '1px solid rgba(255, 255, 255, 0.5)'\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.root, 'width-adjust'),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes.titleContact,\n      children: \"Contact Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.column,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          defaultValue: \"\",\n          control: control,\n          name: \"names\" // rules={{required:{value: true, message: 'Campo obligatorio'}}} \n          ,\n          render: _ref => {\n            var _errors$names, _errors$names2;\n\n            let {\n              field\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              className: classes.input,\n              variant: \"outlined\",\n              error: errors !== null && errors !== void 0 && (_errors$names = errors.names) !== null && _errors$names !== void 0 && _errors$names.message ? true : false,\n              helperText: (errors === null || errors === void 0 ? void 0 : (_errors$names2 = errors.names) === null || _errors$names2 === void 0 ? void 0 : _errors$names2.message) && errors.names.message,\n              label: \"Names\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 36\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.column,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          defaultValue: \"\",\n          control: control,\n          name: \"email\",\n          rules: {\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: \"invalid email address\"\n            }\n          },\n          render: _ref2 => {\n            var _errors$email, _errors$email2;\n\n            let {\n              field\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              className: classes.input,\n              variant: \"outlined\",\n              error: errors !== null && errors !== void 0 && (_errors$email = errors.email) !== null && _errors$email !== void 0 && _errors$email.message ? true : false,\n              helperText: (errors === null || errors === void 0 ? void 0 : (_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.message) && errors.email.message,\n              label: \"Email Address\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 38\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.column,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          defaultValue: \"\",\n          control: control,\n          name: \"message\",\n          rules: {\n            required: {\n              value: true,\n              message: 'Campo obligatorio'\n            }\n          },\n          render: _ref3 => {\n            var _errors$message, _errors$message2;\n\n            let {\n              field\n            } = _ref3;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              multiline: true,\n              rows: 6,\n              control: control,\n              className: classes.input,\n              variant: \"outlined\",\n              error: errors !== null && errors !== void 0 && (_errors$message = errors.message) !== null && _errors$message !== void 0 && _errors$message.message ? true : false,\n              helperText: (errors === null || errors === void 0 ? void 0 : (_errors$message2 = errors.message) === null || _errors$message2 === void 0 ? void 0 : _errors$message2.message) && errors.message.message,\n              label: \"Message\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 36\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        className: classes.sendBtn,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Banner, \"+Tpe5afSplcH0WsTJVvO9bkJ650=\", true, function () {\n  return [useForm];\n});\n\n_c = Banner;\nexport default _c2 = /*#__PURE__*/memo(Banner);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Banner\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Andrew/OneDrive/Documentos/Study/Briefcase/src/views/Contact.jsx"],"names":["React","useState","memo","clsx","makeStyles","TextField","Button","ContactService","useForm","Controller","Banner","props","register","handleSubmit","control","formState","errors","reset","clearErrors","setValue","onSubmit","data","e","console","log","res","sendEmail","setSnack","mode","text","err","openSnack","useStyles","theme","root","marginTop","titleContact","textAlign","marginBottom","form","display","flexWrap","padding","borderRadius","zIndex","column","width","minWidth","input","sendBtn","margin","textTransform","background","borderTop","borderLeft","borderRight","classes","field","names","message","pattern","value","email","required"],"mappings":"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","sourcesContent":["import React, { useState, memo } from 'react'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TextField, Button} from '@material-ui/core';\r\n\r\nimport ContactService from '../services/ContactService'\r\n\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\nconst Banner = (props) => {\r\n\r\n  const { register, handleSubmit, control, formState: { errors }, reset, clearErrors, setValue } = useForm();\r\n\r\n  const onSubmit = async (data, e) => {\r\n    console.log(data, e)\r\n    setValue('names', '')\r\n    setValue('email', '')\r\n    setValue('message', '')\r\n    clearErrors()\r\n    try{\r\n      const res = await ContactService.sendEmail(data)\r\n      props.setSnack({mode: 'success', text: 'Thanks for contact me!'})\r\n    }catch(err){\r\n      props.setSnack({mode: 'error', text: 'Ups... Something was wrong!. Please try again'})\r\n    }\r\n    props.openSnack(true)\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      marginTop: 70,\r\n    },\r\n    titleContact:{\r\n      textAlign: 'center',\r\n      marginBottom: 20\r\n    },\r\n    form:{\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      padding: '3rem 2rem',\r\n      borderRadius: 15,\r\n      zIndex: 2\r\n    },\r\n    column: {\r\n      width: '100%',\r\n      padding: '1rem 1.5rem',\r\n      minWidth: 210,\r\n    },\r\n    input:{\r\n      width: '100%'\r\n    },\r\n    sendBtn:{\r\n      margin: '1rem 1.5rem',\r\n      textTransform: 'none',\r\n      background: 'rgba(255, 255, 255, 0.1)',\r\n      borderTop: '1px solid rgba(255, 255, 255, 0.5)',\r\n      borderLeft: '1px solid rgba(255, 255, 255, 0.5)',\r\n      borderRight: '1px solid rgba(255, 255, 255, 0.5)',\r\n    }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, 'width-adjust')}>\r\n      <h1 className={classes.titleContact}>Contact Me</h1>\r\n      <form className={classes.form} onSubmit={handleSubmit(onSubmit)} >\r\n        <div className={classes.column}>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control} \r\n            name='names'\r\n            // rules={{required:{value: true, message: 'Campo obligatorio'}}} \r\n            render={({ field }) => <TextField\r\n              className={classes.input}\r\n              variant=\"outlined\"\r\n              error={errors?.names?.message ? true : false}\r\n              helperText={errors?.names?.message && errors.names.message}\r\n              label=\"Names\"\r\n              {...field} /> }\r\n          />\r\n        </div>\r\n        <div className={classes.column}>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control} \r\n            name='email'\r\n            rules={{pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                message: \"invalid email address\"\r\n              }}} \r\n              render={({ field }) => <TextField\r\n              className={classes.input}\r\n              variant=\"outlined\"\r\n              error={errors?.email?.message ? true : false}\r\n              helperText={errors?.email?.message && errors.email.message}\r\n              label=\"Email Address\"\r\n              {...field}/>}\r\n          />\r\n        </div>\r\n        <div className={classes.column}>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control} \r\n            name='message'\r\n            rules={{required:{value: true, message: 'Campo obligatorio'}}} \r\n            render={({ field }) => <TextField\r\n              multiline\r\n              rows={6}\r\n              control={control}\r\n              className={classes.input}\r\n              variant=\"outlined\"\r\n              error={errors?.message?.message ? true : false}\r\n              helperText={errors?.message?.message && errors.message.message}\r\n              label=\"Message\"\r\n              {...field}/>}\r\n          />\r\n        </div>\r\n        <Button variant=\"contained\" type=\"submit\" className={classes.sendBtn}>\r\n          Send\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Banner)"]},"metadata":{},"sourceType":"module"}